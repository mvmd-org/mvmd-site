"use strict";(self.webpackChunkmvmd_site=self.webpackChunkmvmd_site||[]).push([[6367],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function a(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:e},n.children)}},9871:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"implementation/interactive-assets","title":"Interactive Asset Implementation","description":"This guide covers implementing interactive elements in metaverse assets, focusing on practical workflows for creating assets that respond to user interaction across different platforms.","source":"@site/docs/implementation/interactive-assets.md","sourceDirName":"implementation","slug":"/implementation/interactive-assets","permalink":"/implementation/interactive-assets","draft":false,"unlisted":false,"editUrl":"https://github.com/mvmd-org/mvmd-site/edit/main/docs/implementation/interactive-assets.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docs","previous":{"title":"Cross-Platform Assets","permalink":"/implementation/cross-platform-assets"},"next":{"title":"Discovery Optimization","permalink":"/implementation/discovery-optimization"}}');var o=t(4848),s=t(8453);const a={sidebar_position:5},r="Interactive Asset Implementation",l={},c=[{value:"Use Cases",id:"use-cases",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Implementation Workflow",id:"implementation-workflow",level:2},{value:"1. Define Interaction Points",id:"1-define-interaction-points",level:3},{value:"2. Define State Transitions",id:"2-define-state-transitions",level:3},{value:"3. Link Interactions to Animations",id:"3-link-interactions-to-animations",level:3},{value:"4. Define Interaction Feedback",id:"4-define-interaction-feedback",level:3},{value:"5. Set Up Connections Between Objects",id:"5-set-up-connections-between-objects",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Implementation Considerations",id:"implementation-considerations",level:2},{value:"Platform-Specific Interaction Systems",id:"platform-specific-interaction-systems",level:3},{value:"Accessibility Considerations",id:"accessibility-considerations",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Common Issues",id:"common-issues",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"interactive-asset-implementation",children:"Interactive Asset Implementation"})}),"\n",(0,o.jsx)(e.p,{children:"This guide covers implementing interactive elements in metaverse assets, focusing on practical workflows for creating assets that respond to user interaction across different platforms."}),"\n",(0,o.jsx)(e.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,o.jsx)(e.p,{children:"Interactive asset implementation addresses these common scenarios:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Creating assets that respond to user actions (click, touch, proximity)"}),"\n",(0,o.jsx)(e.li,{children:"Implementing state changes and animations triggered by interactions"}),"\n",(0,o.jsx)(e.li,{children:"Defining behavior patterns that work across different environments"}),"\n",(0,o.jsx)(e.li,{children:"Building linked interactions between multiple objects"}),"\n",(0,o.jsx)(e.li,{children:"Creating programmatic responses to environmental conditions"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(e.p,{children:"Before implementing interactive assets, ensure you have:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"A clear understanding of your target platforms' interaction systems"}),"\n",(0,o.jsx)(e.li,{children:"Knowledge of supported animation and state management capabilities"}),"\n",(0,o.jsx)(e.li,{children:"Familiarity with basic MVMD metadata structure"}),"\n",(0,o.jsx)(e.li,{children:"Understanding of event-driven interaction models"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"implementation-workflow",children:"Implementation Workflow"}),"\n",(0,o.jsx)(e.h3,{id:"1-define-interaction-points",children:"1. Define Interaction Points"}),"\n",(0,o.jsx)(e.p,{children:"Start by identifying where and how users can interact with your asset:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "3DModel",\n  "name": "Interactive Control Panel",\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "interactionPoints",\n      "name": "Interaction Points",\n      "value": [\n        {\n          "id": "power-button",\n          "type": "button",\n          "position": [0, 0.5, 0.1],\n          "radius": 0.05,\n          "label": "Power",\n          "interactionType": ["touch", "click"],\n          "highlightColor": "#FF3366"\n        },\n        {\n          "id": "volume-slider",\n          "type": "slider",\n          "position": [0.2, 0, 0.1],\n          "size": [0.3, 0.05, 0.02],\n          "label": "Volume",\n          "interactionType": ["grab", "drag"],\n          "axis": "x",\n          "range": [0, 100],\n          "default": 50,\n          "steps": 10\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-define-state-transitions",children:"2. Define State Transitions"}),"\n",(0,o.jsx)(e.p,{children:"Specify how the asset changes state based on interactions:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "3DModel",\n  "name": "Interactive Lamp",\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "states",\n      "name": "Object States",\n      "value": {\n        "initialState": "off",\n        "states": [\n          {\n            "id": "off",\n            "properties": {\n              "emissiveColor": "#000000",\n              "lightEnabled": false\n            }\n          },\n          {\n            "id": "on",\n            "properties": {\n              "emissiveColor": "#FFDD88",\n              "lightEnabled": true,\n              "lightIntensity": 100\n            }\n          },\n          {\n            "id": "dimmed",\n            "properties": {\n              "emissiveColor": "#664400",\n              "lightEnabled": true,\n              "lightIntensity": 30\n            }\n          }\n        ],\n        "transitions": [\n          {\n            "from": "off",\n            "to": "on",\n            "trigger": "click",\n            "target": "lamp-switch",\n            "animation": "switch-on"\n          },\n          {\n            "from": "on",\n            "to": "off",\n            "trigger": "click",\n            "target": "lamp-switch",\n            "animation": "switch-off"\n          },\n          {\n            "from": "on",\n            "to": "dimmed",\n            "trigger": "hold",\n            "target": "lamp-switch",\n            "duration": 2.0\n          }\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-link-interactions-to-animations",children:"3. Link Interactions to Animations"}),"\n",(0,o.jsx)(e.p,{children:"Connect user interactions to appropriate animations:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "3DModel",\n  "name": "Interactive Door",\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "animations",\n      "name": "Interactive Animations",\n      "value": {\n        "animations": [\n          {\n            "id": "door-open",\n            "trigger": "click",\n            "target": "door-handle",\n            "duration": 1.5,\n            "playMode": "once",\n            "transitionTo": "open"\n          },\n          {\n            "id": "door-close",\n            "trigger": "click",\n            "target": "door-panel",\n            "duration": 1.2,\n            "playMode": "once",\n            "transitionTo": "closed"\n          },\n          {\n            "id": "handle-wiggle",\n            "trigger": "interaction-denied",\n            "duration": 0.5,\n            "playMode": "once"\n          }\n        ],\n        "conditions": [\n          {\n            "animation": "door-open",\n            "requiresState": "closed",\n            "fallback": "handle-wiggle"\n          },\n          {\n            "animation": "door-close",\n            "requiresState": "open",\n            "fallback": null\n          }\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"4-define-interaction-feedback",children:"4. Define Interaction Feedback"}),"\n",(0,o.jsx)(e.p,{children:"Specify how the asset provides feedback during interactions:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "3DModel",\n  "name": "Interactive Console",\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "feedback",\n      "name": "Interaction Feedback",\n      "value": {\n        "feedbackTypes": [\n          {\n            "event": "hover",\n            "visual": {\n              "highlightColor": "#88AAFF",\n              "outline": true,\n              "outlineWidth": 2\n            },\n            "audio": null,\n            "haptic": null\n          },\n          {\n            "event": "press",\n            "visual": {\n              "highlightColor": "#FFAA00",\n              "moveDistance": 0.01,\n              "moveDirection": "down"\n            },\n            "audio": {\n              "sound": "button-click",\n              "volume": 0.7,\n              "spatial": true\n            },\n            "haptic": {\n              "intensity": 0.5,\n              "duration": 0.1\n            }\n          },\n          {\n            "event": "success",\n            "visual": {\n              "emissiveColor": "#00FF00",\n              "emissiveDuration": 0.5\n            },\n            "audio": {\n              "sound": "success-chime",\n              "volume": 0.5\n            },\n            "haptic": {\n              "pattern": "success",\n              "intensity": 0.3\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"5-set-up-connections-between-objects",children:"5. Set Up Connections Between Objects"}),"\n",(0,o.jsx)(e.p,{children:"Create interactive systems with connected elements:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "CreativeWork",\n  "name": "Connected Room System",\n  "hasPart": [\n    {\n      "@type": "3DModel",\n      "name": "Light Switch",\n      "identifier": "switch-1"\n    },\n    {\n      "@type": "3DModel",\n      "name": "Ceiling Light",\n      "identifier": "light-1"\n    },\n    {\n      "@type": "3DModel",\n      "name": "Motion Sensor",\n      "identifier": "sensor-1"\n    }\n  ],\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "connections",\n      "name": "Object Connections",\n      "value": {\n        "connections": [\n          {\n            "source": "switch-1",\n            "sourceEvent": "toggle",\n            "target": "light-1",\n            "targetAction": "setPower",\n            "valueMapping": {\n              "on": true,\n              "off": false\n            }\n          },\n          {\n            "source": "sensor-1",\n            "sourceEvent": "motionDetected",\n            "target": "light-1",\n            "targetAction": "setPower",\n            "value": true,\n            "conditions": [\n              {\n                "property": "environmentLight",\n                "operator": "<",\n                "value": 0.3\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsx)(e.p,{children:"A comprehensive interactive asset implementation:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/",\n    "gltf": "https://www.khronos.org/gltf/"\n  },\n  "@type": "3DModel",\n  "name": "Interactive Control Console",\n  "description": "User console with multiple interactive elements",\n  "creator": {\n    "@type": "Organization",\n    "name": "Interactive Systems Inc.",\n    "url": "https://interactivesystems.example.com"\n  },\n  "contentUrl": "https://assets.example.com/console.glb",\n  "encodingFormat": "model/gltf-binary",\n  "license": "https://creativecommons.org/licenses/by/4.0/",\n  \n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "interactionPoints",\n      "name": "Interaction Points",\n      "value": [\n        {\n          "id": "power-button",\n          "type": "button",\n          "position": [0, 0.1, 0.05],\n          "radius": 0.03,\n          "label": "Power",\n          "interactionType": ["touch", "click"],\n          "highlightColor": "#FF3366"\n        },\n        {\n          "id": "volume-slider",\n          "type": "slider",\n          "position": [0.15, 0, 0.05],\n          "size": [0.2, 0.03, 0.01],\n          "label": "Volume",\n          "interactionType": ["grab", "drag"],\n          "axis": "x",\n          "range": [0, 100],\n          "default": 50,\n          "steps": 10\n        },\n        {\n          "id": "mode-selector",\n          "type": "dial",\n          "position": [-0.15, 0, 0.05],\n          "radius": 0.04,\n          "label": "Mode",\n          "interactionType": ["rotate"],\n          "rotation": {\n            "axis": "z",\n            "range": [0, 270],\n            "steps": 3\n          }\n        }\n      ]\n    },\n    {\n      "@type": "PropertyValue",\n      "propertyID": "states",\n      "name": "Object States",\n      "value": {\n        "initialState": "off",\n        "states": [\n          {\n            "id": "off",\n            "properties": {\n              "screenEnabled": false,\n              "powerLed": "#330000",\n              "buttonsEnabled": false\n            }\n          },\n          {\n            "id": "on",\n            "properties": {\n              "screenEnabled": true,\n              "powerLed": "#00FF00",\n              "buttonsEnabled": true,\n              "screenContent": "main-menu"\n            }\n          },\n          {\n            "id": "standby",\n            "properties": {\n              "screenEnabled": true,\n              "powerLed": "#FFAA00",\n              "buttonsEnabled": true,\n              "screenContent": "standby"\n            }\n          }\n        ],\n        "transitions": [\n          {\n            "from": "off",\n            "to": "on",\n            "trigger": "click",\n            "target": "power-button",\n            "animation": "power-up"\n          },\n          {\n            "from": "on",\n            "to": "standby",\n            "trigger": "timer",\n            "duration": 60,\n            "animation": "fade-to-standby"\n          },\n          {\n            "from": ["on", "standby"],\n            "to": "off",\n            "trigger": "hold",\n            "target": "power-button",\n            "duration": 2.0,\n            "animation": "power-down"\n          }\n        ]\n      }\n    },\n    {\n      "@type": "PropertyValue",\n      "propertyID": "animations",\n      "name": "Interactive Animations",\n      "value": {\n        "animations": [\n          {\n            "id": "power-up",\n            "duration": 2.0,\n            "playMode": "once",\n            "transitionTo": "on"\n          },\n          {\n            "id": "power-down",\n            "duration": 1.5,\n            "playMode": "once",\n            "transitionTo": "off"\n          },\n          {\n            "id": "fade-to-standby",\n            "duration": 1.0,\n            "playMode": "once",\n            "transitionTo": "standby"\n          },\n          {\n            "id": "button-press",\n            "duration": 0.2,\n            "playMode": "once"\n          },\n          {\n            "id": "slider-move",\n            "duration": 0.1,\n            "playMode": "continuous"\n          }\n        ]\n      }\n    },\n    {\n      "@type": "PropertyValue",\n      "propertyID": "feedback",\n      "name": "Interaction Feedback",\n      "value": {\n        "feedbackTypes": [\n          {\n            "event": "hover",\n            "visual": {\n              "highlightColor": "#88AAFF",\n              "outline": true,\n              "outlineWidth": 2\n            },\n            "audio": null,\n            "haptic": null\n          },\n          {\n            "event": "press",\n            "visual": {\n              "highlightColor": "#FFAA00",\n              "moveDistance": 0.01,\n              "moveDirection": "down"\n            },\n            "audio": {\n              "sound": "button-click",\n              "volume": 0.7,\n              "spatial": true\n            },\n            "haptic": {\n              "intensity": 0.5,\n              "duration": 0.1\n            }\n          },\n          {\n            "event": "drag",\n            "visual": {\n              "highlightColor": "#FFAA00"\n            },\n            "audio": {\n              "sound": "slider-move",\n              "volume": 0.3,\n              "spatial": true\n            },\n            "haptic": {\n              "intensity": 0.2,\n              "continuous": true\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \n  "gltf:asset": {\n    "version": "2.0",\n    "generator": "Interactive Studio 2024"\n  },\n  \n  "gltf:animations": [\n    "power-up", \n    "power-down", \n    "fade-to-standby",\n    "button-press",\n    "slider-move"\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"implementation-considerations",children:"Implementation Considerations"}),"\n",(0,o.jsx)(e.h3,{id:"platform-specific-interaction-systems",children:"Platform-Specific Interaction Systems"}),"\n",(0,o.jsx)(e.p,{children:"Each platform handles interactions differently:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"VR/AR Environments"}),": May use ray-based selection, controller input, or hand tracking"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Web 3D Viewers"}),": Typically use mouse/touch interactions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Game Engines"}),": Often use custom interaction systems with raycast and collision detection"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Mobile Platforms"}),": Rely on touch-based interactions with simplified feedback"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"accessibility-considerations",children:"Accessibility Considerations"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Include multiple interaction methods for the same functionality"}),"\n",(0,o.jsx)(e.li,{children:"Ensure feedback is available through multiple channels (visual, audio, haptic)"}),"\n",(0,o.jsx)(e.li,{children:"Use standard interaction patterns that users will recognize"}),"\n",(0,o.jsx)(e.li,{children:"Provide sufficient visual cues for interactive elements"}),"\n",(0,o.jsx)(e.li,{children:"Consider reduced motion preferences for animations"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Limit the number of interactive elements visible at one time"}),"\n",(0,o.jsx)(e.li,{children:"Use simple collision shapes for interaction detection"}),"\n",(0,o.jsx)(e.li,{children:"Implement level-of-detail for interaction options at different distances"}),"\n",(0,o.jsx)(e.li,{children:"Optimize animations to use minimal resources"}),"\n",(0,o.jsx)(e.li,{children:"Consider batching interaction feedback for multiple simultaneous interactions"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Input Detection"}),": Inconsistent handling of click/touch events across platforms"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Animation Timing"}),": Different animation systems interpret timing differently"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Feedback Synchronization"}),": Visual, audio and haptic feedback may not sync perfectly"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance Impact"}),": Complex interaction systems can significantly affect performance"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"State Management"}),": Race conditions can occur with rapid state transitions"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/implementation/assets",children:"Basic Asset Implementation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/implementation/cross-platform-assets",children:"Cross-Platform Asset Implementation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/implementation/composable",children:"Composable Asset Implementation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/standards/gltf",children:"glTF"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/standards/openxr",children:"OpenXR"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/integration-profiles/interactable",children:"Integration Profiles: Interactable"})}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);