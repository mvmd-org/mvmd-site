"use strict";(self.webpackChunkmvmd_site=self.webpackChunkmvmd_site||[]).push([[8689],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},9698:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"backup/implementation/standards-implementation","title":"Standards Implementation","description":"This guide provides practical approaches for implementing MVMD alongside existing industry standards and specifications.","source":"@site/docs/backup/implementation/standards-implementation.md","sourceDirName":"backup/implementation","slug":"/backup/implementation/standards-implementation","permalink":"/backup/implementation/standards-implementation","draft":false,"unlisted":false,"editUrl":"https://github.com/mvmd-org/mvmd-site/edit/main/docs/backup/implementation/standards-implementation.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8}}');var a=t(4848),i=t(8453);const r={sidebar_position:8},d="Standards Implementation",o={},l=[{value:"Interoperability Approaches",id:"interoperability-approaches",level:2},{value:"Complementary Standards Integration",id:"complementary-standards-integration",level:3},{value:"glTF Integration",id:"gltf-integration",level:4},{value:"USD Integration",id:"usd-integration",level:4},{value:"Bridging Standards",id:"bridging-standards",level:3},{value:"WebXR + MVMD",id:"webxr--mvmd",level:4},{value:"NFT Standards + MVMD",id:"nft-standards--mvmd",level:4},{value:"Implementation Patterns",id:"implementation-patterns",level:2},{value:"Embedded vs. Referenced Metadata",id:"embedded-vs-referenced-metadata",level:3},{value:"Embedded Approach",id:"embedded-approach",level:4},{value:"Referenced Approach",id:"referenced-approach",level:4},{value:"Progressive Enhancement",id:"progressive-enhancement",level:3},{value:"Implementation Best Practices",id:"implementation-best-practices",level:2},{value:"Standard Compatibility",id:"standard-compatibility",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Validation &amp; Testing",id:"validation--testing",level:3},{value:"Related Resources",id:"related-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"standards-implementation",children:"Standards Implementation"})}),"\n",(0,a.jsx)(n.p,{children:"This guide provides practical approaches for implementing MVMD alongside existing industry standards and specifications."}),"\n",(0,a.jsx)(n.h2,{id:"interoperability-approaches",children:"Interoperability Approaches"}),"\n",(0,a.jsx)(n.h3,{id:"complementary-standards-integration",children:"Complementary Standards Integration"}),"\n",(0,a.jsx)(n.p,{children:"MVMD is designed to complement existing standards rather than replace them. Here are approaches for integrating with popular standards:"}),"\n",(0,a.jsx)(n.h4,{id:"gltf-integration",children:"glTF Integration"}),"\n",(0,a.jsx)(n.p,{children:"When working with glTF 3D models, MVMD can provide rich semantic context:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/",\n    "gltf": "https://registry.khronos.org/glTF/"\n  },\n  "@type": "3DModel",\n  "name": "Detailed Character Model",\n  "description": "High-quality character model with rigging and animations",\n  "contentUrl": "https://assets.example.com/character.glb",\n  "encodingFormat": "model/gltf-binary",\n  "gltf:asset": {\n    "version": "2.0",\n    "generator": "ExampleStudio Exporter 2.0"\n  },\n  "gltf:materials": [\n    {\n      "name": "Skin",\n      "technique": "PBR"\n    },\n    {\n      "name": "Clothing",\n      "technique": "PBR"\n    }\n  ],\n  "gltf:animations": [\n    "Idle",\n    "Walk",\n    "Run"\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usd-integration",children:"USD Integration"}),"\n",(0,a.jsx)(n.p,{children:"For Universal Scene Description (USD) assets:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/",\n    "usd": "https://openusd.org/schemas/"\n  },\n  "@type": "3DModel",\n  "name": "Architectural Scene",\n  "description": "Detailed architectural visualization with materials and lighting",\n  "contentUrl": "https://assets.example.com/building.usdz",\n  "encodingFormat": "model/vnd.usd+zip",\n  "usd:stage": {\n    "upAxis": "Y",\n    "metersPerUnit": 0.01\n  },\n  "usd:layers": [\n    "Geometry",\n    "Materials",\n    "Lighting"\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"bridging-standards",children:"Bridging Standards"}),"\n",(0,a.jsx)(n.h4,{id:"webxr--mvmd",children:"WebXR + MVMD"}),"\n",(0,a.jsx)(n.p,{children:"Enhancing WebXR experiences with MVMD metadata:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<html>\n<head>\n  <title>WebXR Experience</title>\n  <script type="application/ld+json">\n  {\n    "@context": {\n      "@vocab": "https://schema.org/",\n      "mvmd": "https://mvmd.org/v1/"\n    },\n    "@type": "WebApplication",\n    "name": "Interactive Museum Tour",\n    "description": "Virtual tour of historical artifacts with educational content",\n    "applicationCategory": "WebXR",\n    "offers": {\n      "@type": "Offer",\n      "price": "0",\n      "priceCurrency": "USD"\n    },\n    "contentRating": "General",\n    "interactionMode": ["VR", "AR", "Desktop"],\n    "systemRequirements": "WebXR compatible browser"\n  }\n  <\/script>\n</head>\n<body>\n  \x3c!-- WebXR content here --\x3e\n</body>\n</html>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"nft-standards--mvmd",children:"NFT Standards + MVMD"}),"\n",(0,a.jsx)(n.p,{children:"Enhancing ERC-721 NFT metadata with MVMD:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Cosmic Voyager #42",\n  "description": "A unique spacecraft design from the Cosmic Voyagers collection",\n  "image": "https://ipfs.io/ipfs/QmXAXB...",\n  "attributes": [\n    {\n      "trait_type": "Rarity",\n      "value": "Legendary"\n    }\n  ],\n  "mvmd": {\n    "@context": {\n      "@vocab": "https://schema.org/",\n      "mvmd": "https://mvmd.org/v1/"\n    },\n    "@type": "3DModel",\n    "contentUrl": "https://ipfs.io/ipfs/QmZXYZ...",\n    "encodingFormat": "model/gltf-binary",\n    "creator": {\n      "@type": "Person",\n      "name": "Digital Artisan",\n      "url": "https://artist.example.com"\n    },\n    "interactivityType": "Fully Interactive",\n    "spatialDimensions": "3D"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"implementation-patterns",children:"Implementation Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"embedded-vs-referenced-metadata",children:"Embedded vs. Referenced Metadata"}),"\n",(0,a.jsx)(n.h4,{id:"embedded-approach",children:"Embedded Approach"}),"\n",(0,a.jsx)(n.p,{children:"Embedding MVMD directly within asset files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Example: JavaScript code to embed metadata in a Three.js scene export\nconst scene = new THREE.Scene();\n// ... create scene content ...\n\n// Add metadata to the exported glTF\nconst metadataExtension = {\n  mvmd: {\n    "@context": {\n      "@vocab": "https://schema.org/",\n      "mvmd": "https://mvmd.org/v1/"\n    },\n    "@type": "3DModel",\n    "name": "Interactive Scene",\n    "description": "Scene with interactive elements",\n    "creator": {\n      "@type": "Organization",\n      "name": "Example Studio"\n    }\n  }\n};\n\n// Add extension when exporting\nconst gltfExporter = new GLTFExporter();\ngltfExporter.parse(scene, function(gltf) {\n  gltf.asset.extras = metadataExtension;\n  // ... save or upload the glTF ...\n});\n'})}),"\n",(0,a.jsx)(n.h4,{id:"referenced-approach",children:"Referenced Approach"}),"\n",(0,a.jsx)(n.p,{children:"Using external metadata linked to assets:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'// metadata.json - Separate file referenced by assets\n{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "3DModel",\n  "name": "Interactive Scene",\n  "description": "Scene with interactive elements",\n  "contentUrl": "https://assets.example.com/scene.glb",\n  "metadataUrl": "https://assets.example.com/scene-metadata.json"\n}\n\n// In application code:\nasync function loadAssetWithMetadata(assetUrl, metadataUrl) {\n  const [asset, metadata] = await Promise.all([\n    loadAsset(assetUrl),\n    fetch(metadataUrl).then(res => res.json())\n  ]);\n  \n  // Apply metadata to the loaded asset\n  asset.mvmdMetadata = metadata;\n  return asset;\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"progressive-enhancement",children:"Progressive Enhancement"}),"\n",(0,a.jsx)(n.p,{children:"Adding MVMD metadata to existing systems without breaking them:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Example: Adding MVMD to an existing asset pipeline\nfunction enhanceAssetWithMVMD(existingAsset) {\n  // Preserve all existing metadata\n  const enhancedAsset = { ...existingAsset };\n  \n  // Add MVMD metadata\n  enhancedAsset.mvmd = {\n    "@context": {\n      "@vocab": "https://schema.org/",\n      "mvmd": "https://mvmd.org/v1/"\n    },\n    "@type": determineAssetType(existingAsset),\n    "name": existingAsset.name || "Unnamed Asset",\n    "description": existingAsset.description || "",\n    "contentUrl": existingAsset.url || "",\n    "encodingFormat": determineFormat(existingAsset)\n  };\n  \n  return enhancedAsset;\n}\n\n// Process existing assets without breaking current systems\nfunction processAssets(assets) {\n  return assets.map(asset => {\n    const enhancedAsset = enhanceAssetWithMVMD(asset);\n    return enhancedAsset;\n    // Existing systems can ignore the new mvmd property\n    // MVMD-aware systems can utilize the enhanced metadata\n  });\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"implementation-best-practices",children:"Implementation Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"standard-compatibility",children:"Standard Compatibility"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Respect Native Formats"}),": Follow the conventions of each standard"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use Extension Mechanisms"}),": Leverage extension points in existing standards"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Preserve Original Metadata"}),": Don't replace existing metadata"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Document Integration Points"}),": Clearly explain how standards interact"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Optimize Metadata Size"}),": Keep metadata concise and relevant"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use Lazy Loading"}),": Load detailed metadata only when needed"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consider Caching"}),": Cache frequently accessed metadata"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Progressive Detail"}),": Provide basic metadata first, with options to request more"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"validation--testing",children:"Validation & Testing"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Across Platforms"}),": Verify compatibility with different systems"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Validate Against Schemas"}),": Use MVMD validation tools"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ensure Graceful Degradation"}),": Systems without MVMD support should still function"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Monitor Integration Points"}),": Check for breaking changes in related standards"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/backup/integration-profiles/overview",children:"Integration Profiles"}),": Platform-specific integration guides"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/backup/concepts/linking-vs-embedding",children:"Linking vs Embedding"}),": Strategies for metadata references"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../concepts/types-of-assets.md",children:"Types of Assets"}),": Different asset types and their requirements"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);