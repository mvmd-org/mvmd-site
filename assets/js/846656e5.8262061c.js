"use strict";(self.webpackChunkmvmd_site=self.webpackChunkmvmd_site||[]).push([[9492],{5231:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/glossary","title":"Glossary","description":"This glossary provides definitions for key terms used throughout the MVMD documentation.","source":"@site/docs/reference/glossary.md","sourceDirName":"reference","slug":"/reference/glossary","permalink":"/reference/glossary","draft":false,"unlisted":false,"editUrl":"https://github.com/mvmd-org/mvmd-site/edit/main/docs/reference/glossary.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"Schemas","permalink":"/reference/schemas"},"next":{"title":"Overview","permalink":"/contributors/overview"}}');var r=i(4848),a=i(8453);const s={sidebar_position:4},o="Glossary",l={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Metadata",id:"metadata",level:3},{value:"JSON-LD",id:"json-ld",level:3},{value:"Namespace",id:"namespace",level:3},{value:"Schema.org",id:"schemaorg",level:3},{value:"Embedding",id:"embedding",level:3},{value:"Linking",id:"linking",level:3},{value:"Metaverse Asset Types",id:"metaverse-asset-types",level:2},{value:"3D Model",id:"3d-model",level:3},{value:"Avatar",id:"avatar",level:3},{value:"Scene",id:"scene",level:3},{value:"Wearable",id:"wearable",level:3},{value:"Digital Twin",id:"digital-twin",level:3},{value:"Composable Asset",id:"composable-asset",level:3},{value:"Technical Terms",id:"technical-terms",level:2},{value:"@context",id:"context",level:3},{value:"@type",id:"type",level:3},{value:"additionalProperty",id:"additionalproperty",level:3},{value:"PropertyValue",id:"propertyvalue",level:3},{value:"Integration Profile",id:"integration-profile",level:3},{value:"Validation",id:"validation",level:3},{value:"Metadata Properties",id:"metadata-properties",level:2},{value:"contentUrl",id:"contenturl",level:3},{value:"encodingFormat",id:"encodingformat",level:3},{value:"license",id:"license",level:3},{value:"creator",id:"creator",level:3},{value:"identifier",id:"identifier",level:3},{value:"Standards and Formats",id:"standards-and-formats",level:2},{value:"glTF (GL Transmission Format)",id:"gltf-gl-transmission-format",level:3},{value:"USD (Universal Scene Description)",id:"usd-universal-scene-description",level:3},{value:"VRM",id:"vrm",level:3},{value:"C2PA (Coalition for Content Provenance and Authenticity)",id:"c2pa-coalition-for-content-provenance-and-authenticity",level:3},{value:"MIME Type",id:"mime-type",level:3},{value:"Implementation Concepts",id:"implementation-concepts",level:2},{value:"Cross-Platform",id:"cross-platform",level:3},{value:"Interoperability",id:"interoperability",level:3},{value:"Portability",id:"portability",level:3},{value:"Discoverability",id:"discoverability",level:3},{value:"Validator",id:"validator",level:3},{value:"Related Resources",id:"related-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"glossary",children:"Glossary"})}),"\n",(0,r.jsx)(n.p,{children:"This glossary provides definitions for key terms used throughout the MVMD documentation."}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsx)(n.p,{children:"Structured information that describes, explains, locates, or otherwise makes it easier to retrieve, use, or manage digital assets."}),"\n",(0,r.jsx)(n.h3,{id:"json-ld",children:"JSON-LD"}),"\n",(0,r.jsx)(n.p,{children:"JavaScript Object Notation for Linked Data (JSON-LD) is a method of encoding linked data using JSON. It provides a way to express Schema.org metadata using JSON syntax."}),"\n",(0,r.jsx)(n.h3,{id:"namespace",children:"Namespace"}),"\n",(0,r.jsx)(n.p,{children:"A container for a set of identifiers or properties that helps prevent naming conflicts. In MVMD, different standards (like Schema.org, glTF, etc.) have their own namespaces."}),"\n",(0,r.jsx)(n.h3,{id:"schemaorg",children:"Schema.org"}),"\n",(0,r.jsx)(n.p,{children:"A collaborative community project that creates, maintains, and promotes schemas for structured data on the internet, serving as the foundation for MVMD metadata."}),"\n",(0,r.jsx)(n.h3,{id:"embedding",children:"Embedding"}),"\n",(0,r.jsx)(n.p,{children:"Directly including metadata within a file or data structure, as opposed to linking to external metadata."}),"\n",(0,r.jsx)(n.h3,{id:"linking",children:"Linking"}),"\n",(0,r.jsx)(n.p,{children:"Connecting to metadata stored in separate files through references, rather than embedding it directly."}),"\n",(0,r.jsx)(n.h2,{id:"metaverse-asset-types",children:"Metaverse Asset Types"}),"\n",(0,r.jsx)(n.h3,{id:"3d-model",children:"3D Model"}),"\n",(0,r.jsx)(n.p,{children:"A digital representation of a three-dimensional object that can be rendered and viewed from different angles."}),"\n",(0,r.jsx)(n.h3,{id:"avatar",children:"Avatar"}),"\n",(0,r.jsx)(n.p,{children:"A digital representation of a user or character in a virtual environment, typically customizable and animated."}),"\n",(0,r.jsx)(n.h3,{id:"scene",children:"Scene"}),"\n",(0,r.jsx)(n.p,{children:"A virtual environment or space that contains multiple assets and defines their relationships."}),"\n",(0,r.jsx)(n.h3,{id:"wearable",children:"Wearable"}),"\n",(0,r.jsx)(n.p,{children:"Digital items that can be worn by avatars, such as clothing, accessories, or equipment."}),"\n",(0,r.jsx)(n.h3,{id:"digital-twin",children:"Digital Twin"}),"\n",(0,r.jsx)(n.p,{children:"A virtual representation of a physical object, environment, or system that mirrors the real-world counterpart."}),"\n",(0,r.jsx)(n.h3,{id:"composable-asset",children:"Composable Asset"}),"\n",(0,r.jsx)(n.p,{children:"An asset that consists of multiple components that can be assembled, reconfigured, or customized."}),"\n",(0,r.jsx)(n.h2,{id:"technical-terms",children:"Technical Terms"}),"\n",(0,r.jsx)(n.h3,{id:"context",children:"@context"}),"\n",(0,r.jsxs)(n.p,{children:["In JSON-LD, the ",(0,r.jsx)(n.code,{children:"@context"})," property defines the vocabulary and rules for interpreting the metadata."]}),"\n",(0,r.jsx)(n.h3,{id:"type",children:"@type"}),"\n",(0,r.jsxs)(n.p,{children:["In JSON-LD, the ",(0,r.jsx)(n.code,{children:"@type"})," property specifies the type of the object being described, which determines available properties."]}),"\n",(0,r.jsx)(n.h3,{id:"additionalproperty",children:"additionalProperty"}),"\n",(0,r.jsx)(n.p,{children:"A Schema.org property used in MVMD to add custom or extended properties that aren't defined in the core Schema.org vocabulary."}),"\n",(0,r.jsx)(n.h3,{id:"propertyvalue",children:"PropertyValue"}),"\n",(0,r.jsxs)(n.p,{children:["A Schema.org type used to represent name-value pairs, commonly used with ",(0,r.jsx)(n.code,{children:"additionalProperty"})," in MVMD."]}),"\n",(0,r.jsx)(n.h3,{id:"integration-profile",children:"Integration Profile"}),"\n",(0,r.jsx)(n.p,{children:"A standardized metadata template for specific asset types or use cases that ensures interoperability."}),"\n",(0,r.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,r.jsx)(n.p,{children:"The process of checking metadata against schema definitions and rules to ensure its correctness and completeness."}),"\n",(0,r.jsx)(n.h2,{id:"metadata-properties",children:"Metadata Properties"}),"\n",(0,r.jsx)(n.h3,{id:"contenturl",children:"contentUrl"}),"\n",(0,r.jsx)(n.p,{children:"A URL pointing to the content file or resource being described."}),"\n",(0,r.jsx)(n.h3,{id:"encodingformat",children:"encodingFormat"}),"\n",(0,r.jsx)(n.p,{children:'The MIME type or format of the content, such as "model/gltf-binary" for glTF files.'}),"\n",(0,r.jsx)(n.h3,{id:"license",children:"license"}),"\n",(0,r.jsx)(n.p,{children:"The license under which the content is released, defining how it can be used, modified, or distributed."}),"\n",(0,r.jsx)(n.h3,{id:"creator",children:"creator"}),"\n",(0,r.jsx)(n.p,{children:"The person or organization that created the content."}),"\n",(0,r.jsx)(n.h3,{id:"identifier",children:"identifier"}),"\n",(0,r.jsx)(n.p,{children:"A unique identifier for the asset, typically structured as a PropertyValue with propertyID and value."}),"\n",(0,r.jsx)(n.h2,{id:"standards-and-formats",children:"Standards and Formats"}),"\n",(0,r.jsx)(n.h3,{id:"gltf-gl-transmission-format",children:"glTF (GL Transmission Format)"}),"\n",(0,r.jsx)(n.p,{children:"An open standard file format for 3D scenes and models developed by the Khronos Group."}),"\n",(0,r.jsx)(n.h3,{id:"usd-universal-scene-description",children:"USD (Universal Scene Description)"}),"\n",(0,r.jsx)(n.p,{children:"A framework for interchange of 3D computer graphics data developed by Pixar."}),"\n",(0,r.jsx)(n.h3,{id:"vrm",children:"VRM"}),"\n",(0,r.jsx)(n.p,{children:"An extension to glTF for 3D humanoid avatars, supporting facial expressions and other avatar-specific features."}),"\n",(0,r.jsx)(n.h3,{id:"c2pa-coalition-for-content-provenance-and-authenticity",children:"C2PA (Coalition for Content Provenance and Authenticity)"}),"\n",(0,r.jsx)(n.p,{children:"A technical standard for certifying the source and history of media content."}),"\n",(0,r.jsx)(n.h3,{id:"mime-type",children:"MIME Type"}),"\n",(0,r.jsx)(n.p,{children:'A standard that indicates the nature and format of a file or data (e.g., "model/gltf-binary").'}),"\n",(0,r.jsx)(n.h2,{id:"implementation-concepts",children:"Implementation Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"cross-platform",children:"Cross-Platform"}),"\n",(0,r.jsx)(n.p,{children:"The ability for an asset to function across different metaverse platforms, environments, or applications."}),"\n",(0,r.jsx)(n.h3,{id:"interoperability",children:"Interoperability"}),"\n",(0,r.jsx)(n.p,{children:"The ability of different systems to work together and exchange information seamlessly."}),"\n",(0,r.jsx)(n.h3,{id:"portability",children:"Portability"}),"\n",(0,r.jsx)(n.p,{children:"The ability to move assets between different environments or platforms without losing functionality."}),"\n",(0,r.jsx)(n.h3,{id:"discoverability",children:"Discoverability"}),"\n",(0,r.jsx)(n.p,{children:"The ease with which assets can be found through search, browsing, or recommendation systems."}),"\n",(0,r.jsx)(n.h3,{id:"validator",children:"Validator"}),"\n",(0,r.jsx)(n.p,{children:"A tool that checks metadata against schema definitions to ensure correctness and completeness."}),"\n",(0,r.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/reference/schemas",children:"Schema Definitions"}),": Technical schema definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../standards/schema-org.md",children:"Schema.org Standard"}),": Core vocabulary details"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../concepts/types-of-assets.md",children:"Types of Assets"}),": Asset classification"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);