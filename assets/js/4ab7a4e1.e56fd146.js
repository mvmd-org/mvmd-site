"use strict";(self.webpackChunkmvmd_site=self.webpackChunkmvmd_site||[]).push([[1498],{7611:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"concepts/fundamentals","title":"Fundamentals","description":"This guide covers the essential concepts needed to understand and implement metadata for Metaverse assets.","source":"@site/docs/concepts/fundamentals.md","sourceDirName":"concepts","slug":"/concepts/fundamentals","permalink":"/concepts/fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/mvmd-org/mvmd-site/edit/main/docs/concepts/fundamentals.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/concepts/overview"},"next":{"title":"Types of Things","permalink":"/concepts/types-of-things"}}');var i=s(4848),a=s(8453);const r={sidebar_position:2},o="Fundamentals",l={},d=[{value:"Schema.org Foundation",id:"schemaorg-foundation",level:2},{value:"JSON-LD",id:"json-ld",level:2},{value:"Required Context Elements",id:"required-context-elements",level:2},{value:"1. Schema.org (@vocab)",id:"1-schemaorg-vocab",level:3},{value:"2. MVMD Version (mvmd)",id:"2-mvmd-version-mvmd",level:3},{value:"Additional Contexts",id:"additional-contexts",level:2},{value:"Namespaces",id:"namespaces",level:3},{value:"Proper Value Handling",id:"proper-value-handling",level:2},{value:"Simple Values",id:"simple-values",level:3},{value:"Structured Values",id:"structured-values",level:3},{value:"Multiple Values",id:"multiple-values",level:3},{value:"Type of Thing",id:"type-of-thing",level:2},{value:"Extension Points",id:"extension-points",level:2},{value:"Additional Properties",id:"additional-properties",level:3},{value:"What&#39;s Next",id:"whats-next",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fundamentals",children:"Fundamentals"})}),"\n",(0,i.jsx)(n.p,{children:"This guide covers the essential concepts needed to understand and implement metadata for Metaverse assets.\nAt its core, MVMD builds upon Schema.org's vocabulary and JSON-LD's syntax to create a standardized way to describe\nMetaverse assets."}),"\n",(0,i.jsx)(n.p,{children:"We will be building on top of these fundamentals throughout the documentation, so you will see it often."}),"\n",(0,i.jsx)(n.h2,{id:"schemaorg-foundation",children:"Schema.org Foundation"}),"\n",(0,i.jsxs)(n.p,{children:["Please review the official docs at ",(0,i.jsx)(n.a,{href:"https://schema.org/",children:"schema.org"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Schema.org is a collaborative, community-driven effort to create and maintain a shared vocabulary for structured data.\nIt provides:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A standardized vocabulary for describing digital content"}),"\n",(0,i.jsx)(n.li,{children:"Well-defined types and properties"}),"\n",(0,i.jsx)(n.li,{children:"Regular updates and improvements"}),"\n",(0,i.jsx)(n.li,{children:"Broad industry adoption"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"MVMD uses Schema.org as its foundation because:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It's widely supported across platforms"}),"\n",(0,i.jsx)(n.li,{children:"It has a rich vocabulary for digital assets"}),"\n",(0,i.jsx)(n.li,{children:"It's extensible for specialized needs"}),"\n",(0,i.jsx)(n.li,{children:"It integrates well with search engines and data systems"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"json-ld",children:"JSON-LD"}),"\n",(0,i.jsxs)(n.p,{children:["Please review the official docs at ",(0,i.jsx)(n.a,{href:"https://json-ld.org/",children:"json-ld.org"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"JSON-LD (JavaScript Object Notation for Linked Data) is our chosen format because it:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Is easy to read and write"}),"\n",(0,i.jsx)(n.li,{children:"Supports namespacing and context"}),"\n",(0,i.jsx)(n.li,{children:"Enables linked data connections"}),"\n",(0,i.jsx)(n.li,{children:"Supports complex references to avoid repeating data"}),"\n",(0,i.jsx)(n.li,{children:"Maintains compatibility with regular JSON"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Basic JSON-LD structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": "https://schema.org/",\n  "@type": "Thing",\n  "name": "Example Object"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"required-context-elements",children:"Required Context Elements"}),"\n",(0,i.jsx)(n.p,{children:"Every MVMD metadata object must include two core contexts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"1-schemaorg-vocab",children:"1. Schema.org (@vocab)"}),"\n",(0,i.jsx)(n.p,{children:"The base vocabulary for all metadata properties, providing the foundation for describing digital assets and their\nrelationships."}),"\n",(0,i.jsx)(n.h3,{id:"2-mvmd-version-mvmd",children:"2. MVMD Version (mvmd)"}),"\n",(0,i.jsx)(n.p,{children:"Indicates compliance with MVMD standards and enables version-specific features:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Required in all MVMD metadata"}),"\n",(0,i.jsx)(n.li,{children:"Enables validation of version-specific features"}),"\n",(0,i.jsx)(n.li,{children:"Supports backwards compatibility"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"additional-contexts",children:"Additional Contexts"}),"\n",(0,i.jsx)(n.p,{children:"When working with specific types of assets or standards, you can add specialized contexts to your metadata.\nThese additional contexts allow you to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Include standard-specific properties and types"}),"\n",(0,i.jsx)(n.li,{children:"Maintain semantic clarity in your metadata"}),"\n",(0,i.jsx)(n.li,{children:"Enable validation for specific standards"}),"\n",(0,i.jsx)(n.li,{children:"Support specialized features and capabilities"}),"\n",(0,i.jsx)(n.li,{children:"Embed data directly in the metadata instead of referencing external files."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, when working with 3D models, you might include contexts for glTF and/or USD:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/",\n    "gltf": "https://www.khronos.org/gltf/",\n    "usd": "https://openusd.org/ns/"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Please see the ",(0,i.jsx)(n.a,{href:"/embedding/overview",children:"Embedding"})," section for details."]})}),"\n",(0,i.jsx)(n.h3,{id:"namespaces",children:"Namespaces"}),"\n",(0,i.jsx)(n.p,{children:"Use for standard-specific properties, use namespaces, which use the context's name as a prefix:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/",\n    "gltf": "https://www.khronos.org/gltf/"\n  },\n  "@type": "CreativeWork",\n  "gltf:materials": [\n    {\n      "@type": "gltf:Material",\n      "name": "Metal",\n      "pbrMetallicRoughness": {\n        "metallicFactor": 1.0,\n        "roughnessFactor": 0.5\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Please see the ",(0,i.jsx)(n.a,{href:"/embedding/overview",children:"Embedding"})," section for details."]})}),"\n",(0,i.jsx)(n.h2,{id:"proper-value-handling",children:"Proper Value Handling"}),"\n",(0,i.jsx)(n.p,{children:"MVMD follows specific patterns for handling different types of values:"}),"\n",(0,i.jsx)(n.h3,{id:"simple-values",children:"Simple Values"}),"\n",(0,i.jsx)(n.p,{children:"Use direct values for basic properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "CreativeWork",\n  "name": "Asset Name",\n  "description": "Asset description"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"structured-values",children:"Structured Values"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"PropertyValue"})," for complex or custom properties:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "CreativeWork",\n  "additionalProperty": {\n    "@type": "PropertyValue",\n    "propertyID": "customField",\n    "name": "Custom Field Name",\n    "value": "custom value"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-values",children:"Multiple Values"}),"\n",(0,i.jsx)(n.p,{children:"Use arrays for multiple values, ensuring each object has proper type declarations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "CreativeWork",\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "field1",\n      "value": "value1"\n    },\n    {\n      "@type": "PropertyValue",\n      "propertyID": "field2",\n      "value": "value2"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"type-of-thing",children:"Type of Thing"}),"\n",(0,i.jsx)(n.p,{children:"The choice of root object type (the type of thing) affects what properties and relationships are available.\nThe CreativeWork is used as the primary entry point for most assets becase Schema.org allows for most object types with the CreativeWork."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.org/v1/"\n  },\n  "@type": "CreativeWork",\n  "name": "Asset Name"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["We cover the root object types in detail in the ",(0,i.jsx)(n.a,{href:"/concepts/types-of-things",children:"Types of Things"})," page and demonstrate\ntheir use further in the ",(0,i.jsx)(n.a,{href:"/recipes/overview",children:"Recipes"})," section."]})}),"\n",(0,i.jsx)(n.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,i.jsx)(n.p,{children:"MVMD provides several standard ways to extend metadata:"}),"\n",(0,i.jsx)(n.h3,{id:"additional-properties",children:"Additional Properties"}),"\n",(0,i.jsx)(n.p,{children:"Use for custom data that doesn't fit standard properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "additionalProperty": [\n    {\n      "@type": "PropertyValue",\n      "propertyID": "customMetric",\n      "name": "Custom Metric",\n      "value": 42\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"whats-next",children:"What's Next"}),"\n",(0,i.jsx)(n.p,{children:"These fundamentals provide the foundation for implementing Metaverse metadata. From here, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn about specific types in ",(0,i.jsx)(n.a,{href:"/concepts/types-of-things",children:"Types of Things"})]}),"\n",(0,i.jsxs)(n.li,{children:["Understand asset relationships in ",(0,i.jsx)(n.a,{href:"/concepts/composition",children:"Asset Types"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore content strategies in ",(0,i.jsx)(n.a,{href:"/concepts/uris-vs-embedding",children:"URLs vs Embedding"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Remember: The concepts covered here are universal to all MVMD implementations. More specific patterns and\nimplementations are covered in other sections of the documentation."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);