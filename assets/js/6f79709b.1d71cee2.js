"use strict";(self.webpackChunkmvmd_site=self.webpackChunkmvmd_site||[]).push([[4907],{4185:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"concepts/metadata/fundamentals","title":"Metadata Fundamentals","description":"Metadata is structured information that describes, explains, and locates digital assets, making them easier to discover, use, and manage across metaverse platforms.","source":"@site/docs/concepts/metadata/fundamentals.md","sourceDirName":"concepts/metadata","slug":"/concepts/metadata/fundamentals","permalink":"/concepts/metadata/fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/mvmd-org/mvmd-site/edit/main/docs/concepts/metadata/fundamentals.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Overview","permalink":"/concepts/overview"},"next":{"title":"Structure","permalink":"/concepts/metadata/structure"}}');var i=s(4848),a=s(8453);const r={sidebar_position:1},o="Metadata Fundamentals",l={},c=[{value:"Purpose",id:"purpose",level:2},{value:"Key Principles",id:"key-principles",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"JSON-LD Structure",id:"json-ld-structure",level:3},{value:"Schema.org Foundation",id:"schemaorg-foundation",level:3},{value:"Namespaces and Extensions",id:"namespaces-and-extensions",level:3},{value:"Example",id:"example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Mistakes",id:"common-mistakes",level:2},{value:"Related Concepts",id:"related-concepts",level:2},{value:"Implementation References",id:"implementation-references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"metadata-fundamentals",children:"Metadata Fundamentals"})}),"\n",(0,i.jsx)(n.p,{children:"Metadata is structured information that describes, explains, and locates digital assets, making them easier to discover, use, and manage across metaverse platforms."}),"\n",(0,i.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,i.jsx)(n.p,{children:"Metadata serves as the foundation for asset interoperability in the metaverse. It provides a standardized way to communicate essential information about digital assets, enabling consistent representation across different platforms, ensuring proper attribution, and supporting discovery and integration."}),"\n",(0,i.jsx)(n.h2,{id:"key-principles",children:"Key Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Standardization"}),": Using established schemas and vocabularies ensures consistency and interoperability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extensibility"}),": The metadata model can be extended with domain-specific properties while maintaining compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semantic Clarity"}),": Clear meaning of properties allows for proper interpretation across systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verification"}),": Metadata supports content authenticity and provenance verification"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Discoverability"}),": Well-structured metadata enables efficient search and filtering"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:"MVMD builds on JSON-LD and Schema.org to create a flexible, interoperable metadata framework for metaverse assets."}),"\n",(0,i.jsx)(n.h3,{id:"json-ld-structure",children:"JSON-LD Structure"}),"\n",(0,i.jsx)(n.p,{children:"JSON-LD (JavaScript Object Notation for Linked Data) provides the syntax and structure for MVMD metadata:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"@context"}),": Defines the vocabulary/namespaces used in the metadata"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"@type"}),": Specifies the kind of item being described"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Properties"}),": Key-value pairs describing aspects of the item"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nested Objects"}),": Allow for rich, structured descriptions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"IRIs"}),": Use web identifiers to link to external resources"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"schemaorg-foundation",children:"Schema.org Foundation"}),"\n",(0,i.jsx)(n.p,{children:"Schema.org provides a core vocabulary that's widely understood and adopted:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Types"}),": CreativeWork, MediaObject, 3DModel, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Properties"}),": name, description, creator, contentUrl, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extensions"}),": Additional properties beyond the core Schema.org set"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"namespaces-and-extensions",children:"Namespaces and Extensions"}),"\n",(0,i.jsx)(n.p,{children:"Namespaces allow for domain-specific extensions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Standard Namespaces"}),": Reference established technical standards (glTF, USD, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Namespaces"}),": Define application-specific properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context Declaration"}),": Map namespace prefixes to formal definitions"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"A basic metadata example showing fundamental structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "@context": {\n    "@vocab": "https://schema.org/",\n    "mvmd": "https://mvmd.io/",\n    "gltf": "https://www.khronos.org/gltf/"\n  },\n  "@type": "3DModel",\n  "name": "Modern Chair",\n  "description": "A sleek modern chair design",\n  "creator": {\n    "@type": "Person",\n    "name": "Jane Designer",\n    "url": "https://example.com/jane"\n  },\n  "contentUrl": "https://assets.example.com/chair.glb",\n  "encodingFormat": "model/gltf-binary",\n  "license": "https://creativecommons.org/licenses/by/4.0/",\n  "gltf:asset": {\n    "version": "2.0",\n    "generator": "ExampleStudio Exporter 2.0"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Include all required properties for your asset type"}),"\n",(0,i.jsx)(n.li,{children:"Use the most specific type possible for your asset"}),"\n",(0,i.jsx)(n.li,{children:"Validate your metadata against the appropriate schema"}),"\n",(0,i.jsx)(n.li,{children:"Keep metadata concise while including essential information"}),"\n",(0,i.jsx)(n.li,{children:"Use established vocabularies before creating custom properties"}),"\n",(0,i.jsx)(n.li,{children:"Include licensing and attribution information"}),"\n",(0,i.jsx)(n.li,{children:"Reference external resources with stable, persistent URLs"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-mistakes",children:"Common Mistakes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inconsistent Property Names"}),": Using variant spellings or custom properties that duplicate standard ones"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing Context"}),": Omitting the @context that defines vocabularies and namespaces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incorrect Types"}),": Using inappropriate types for the asset being described"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shallow Metadata"}),": Including only basic properties without domain-specific details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Invalid JSON-LD"}),": Creating metadata that doesn't follow JSON-LD syntax rules"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-concepts",children:"Related Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../types-of-assets.md",children:"Types of Assets"}),": Understanding different asset types and their specific requirements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/concepts/linking-vs-embedding",children:"Linking vs Embedding"}),": Strategies for referencing related assets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/concepts/metadata/structure",children:"Structure"}),": Principles for organizing complex metadata"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-references",children:"Implementation References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/implementation/getting-started",children:"Getting Started"}),": Implementing your first metadata"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/concepts/metadata/schema-org",children:"Schema.org"}),": Core vocabulary implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/tools/validator",children:"Validation Tools"}),": Tools for validating your metadata"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);